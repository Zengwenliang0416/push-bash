const vscode = require('vscode');
const { spawn } = require('child_process');
const { promisify } = require('util');

// ÂõΩÈôÖÂåñÊñáÊú¨
const i18n = {
    'zh-cn': {
        // Êèê‰∫§Á±ªÂûã
        commitTypes: [
            { label: 'feat: ‚ú® Êñ∞ÂäüËÉΩ', value: 'feat', icon: '‚ú®' },
            { label: 'fix: üêõ ‰øÆÂ§ç', value: 'fix', icon: 'üêõ' },
            { label: 'docs: üìù ÊñáÊ°£', value: 'docs', icon: 'üìù' },
            { label: 'style: üíÑ Ê†ºÂºè', value: 'style', icon: 'üíÑ' },
            { label: 'refactor: ‚ôªÔ∏è ÈáçÊûÑ', value: 'refactor', icon: '‚ôªÔ∏è' },
            { label: 'perf: ‚ö°Ô∏è ÊÄßËÉΩ', value: 'perf', icon: '‚ö°Ô∏è' },
            { label: 'test: ‚úÖ ÊµãËØï', value: 'test', icon: '‚úÖ' },
            { label: 'chore: üîß Â∑•ÂÖ∑', value: 'chore', icon: 'üîß' },
            { label: 'revert: ‚è™Ô∏è ÂõûÈÄÄ', value: 'revert', icon: '‚è™Ô∏è' },
            { label: 'build: üì¶Ô∏è ÊâìÂåÖ', value: 'build', icon: 'üì¶Ô∏è' },
            { label: 'ci: üë∑ ÈõÜÊàê', value: 'ci', icon: 'üë∑' },
            { label: 'ui: üé® ÁïåÈù¢Áõ∏ÂÖ≥', value: 'ui', icon: 'üé®' }
        ],
        // ÊèêÁ§∫‰ø°ÊÅØ
        messages: {
            noWorkspace: 'ËØ∑ÂÖàÊâìÂºÄ‰∏Ä‰∏™Â∑•‰ΩúÂå∫',
            noChanges: 'Ê≤°ÊúâÈúÄË¶ÅÊèê‰∫§ÁöÑÊõ¥Êîπ',
            hasUnpushedCommits: 'Ê≤°ÊúâÈúÄË¶ÅÊèê‰∫§ÁöÑÊõ¥ÊîπÔºå‰ΩÜÂèëÁé∞ÊúâÊú™Êé®ÈÄÅÁöÑÊèê‰∫§„ÄÇÊòØÂê¶Ë¶ÅÊé®ÈÄÅÂà∞ËøúÁ®ãÔºü',
            selectFiles: 'ÈÄâÊã©Ë¶ÅÊèê‰∫§ÁöÑÊñá‰ª∂',
            selectCommitType: 'ÈÄâÊã©Êèê‰∫§Á±ªÂûã',
            enterCommitMessage: 'ËæìÂÖ•Êèê‰∫§‰ø°ÊÅØ',
            commitSuccess: 'Êèê‰∫§ÊàêÂäüÔºÅ',
            pushSuccess: 'Êé®ÈÄÅÊàêÂäüÔºÅ',
            pushFailed: 'Êé®ÈÄÅÂ§±Ë¥•',
            commitFailed: 'Êèê‰∫§Â§±Ë¥•',
            pushQuestion: 'ÊòØÂê¶Êé®ÈÄÅÂà∞ËøúÁ®ã‰ªìÂ∫ìÔºü',
            yes: 'ÊòØ',
            no: 'Âê¶',
            pushing: 'Ê≠£Âú®Êé®ÈÄÅÂà∞ËøúÁ®ã‰ªìÂ∫ì...',
            networkError: 'ËøûÊé•GitHubÊúçÂä°Âô®Â§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúËøûÊé•Êàñ‰ª£ÁêÜËÆæÁΩÆ',
            authError: 'ËÆ§ËØÅÂ§±Ë¥•ÔºåËØ∑Ê£ÄÊü•GitÂá≠ÊçÆËÆæÁΩÆ',
            proxyError: 'ËÆæÁΩÆ‰ª£ÁêÜÂ§±Ë¥•',
            // ËÆæÁΩÆÁïåÈù¢ÊñáÊú¨
            settings: {
                language: {
                    title: 'ËØ≠Ë®ÄÈÄâÊã©',
                    description: 'ÈÄâÊã©ÁïåÈù¢ÊòæÁ§∫ËØ≠Ë®Ä'
                },
                proxy: {
                    title: '‰ª£ÁêÜËÆæÁΩÆ',
                    description: 'ÈÖçÁΩÆGitÊìç‰ΩúÁöÑ‰ª£ÁêÜÊúçÂä°Âô®',
                    enabled: {
                        title: 'ÂêØÁî®‰ª£ÁêÜ',
                        description: 'ÊòØÂê¶ÂêØÁî®‰ª£ÁêÜÊúçÂä°'
                    },
                    host: {
                        title: '‰ª£ÁêÜ‰∏ªÊú∫',
                        description: '‰ª£ÁêÜÊúçÂä°Âô®Âú∞ÂùÄ',
                        placeholder: '‰æãÂ¶Ç: 127.0.0.1, localhost'
                    },
                    port: {
                        title: '‰ª£ÁêÜÁ´ØÂè£',
                        description: '‰ª£ÁêÜÊúçÂä°Âô®Á´ØÂè£',
                        placeholder: '‰æãÂ¶Ç: 7890, 1087'
                    }
                }
            }
        }
    },
    'en': {
        commitTypes: [
            { label: 'feat: ‚ú® New Feature', value: 'feat', icon: '‚ú®' },
            { label: 'fix: üêõ Bug Fix', value: 'fix', icon: 'üêõ' },
            { label: 'docs: üìù Documentation', value: 'docs', icon: 'üìù' },
            { label: 'style: üíÑ Formatting', value: 'style', icon: 'üíÑ' },
            { label: 'refactor: ‚ôªÔ∏è Refactor', value: 'refactor', icon: '‚ôªÔ∏è' },
            { label: 'perf: ‚ö°Ô∏è Performance', value: 'perf', icon: '‚ö°Ô∏è' },
            { label: 'test: ‚úÖ Testing', value: 'test', icon: '‚úÖ' },
            { label: 'chore: üîß Chore', value: 'chore', icon: 'üîß' },
            { label: 'revert: ‚è™Ô∏è Revert', value: 'revert', icon: '‚è™Ô∏è' },
            { label: 'build: üì¶Ô∏è Build', value: 'build', icon: 'üì¶Ô∏è' },
            { label: 'ci: üë∑ CI', value: 'ci', icon: 'üë∑' },
            { label: 'ui: üé® UI', value: 'ui', icon: 'üé®' }
        ],
        messages: {
            noWorkspace: 'Please open a workspace first',
            noChanges: 'No changes to commit',
            hasUnpushedCommits: 'No changes to commit, but found unpushed commits. Would you like to push to remote?',
            selectFiles: 'Select files to commit',
            selectCommitType: 'Select commit type',
            enterCommitMessage: 'Enter commit message',
            commitSuccess: 'Commit successful!',
            pushSuccess: 'Push successful!',
            pushFailed: 'Push failed',
            commitFailed: 'Commit failed',
            pushQuestion: 'Push to remote repository?',
            yes: 'Yes',
            no: 'No',
            pushing: 'Pushing to remote repository...',
            networkError: 'Failed to connect to GitHub server, please check your network connection or proxy settings',
            authError: 'Authentication failed, please check your Git credentials',
            proxyError: 'Failed to set proxy',
            // Settings interface text
            settings: {
                language: {
                    title: 'Language',
                    description: 'Select interface language'
                },
                proxy: {
                    title: 'Proxy Settings',
                    description: 'Configure proxy server for Git operations',
                    enabled: {
                        title: 'Enable Proxy',
                        description: 'Enable proxy service'
                    },
                    host: {
                        title: 'Proxy Host',
                        description: 'Proxy server address',
                        placeholder: 'e.g., 127.0.0.1, localhost'
                    },
                    port: {
                        title: 'Proxy Port',
                        description: 'Proxy server port',
                        placeholder: 'e.g., 7890, 1087'
                    }
                }
            }
        }
    }
};

// Ëé∑ÂèñÂΩìÂâçËØ≠Ë®Ä
function getCurrentLanguage() {
    // È¶ñÂÖàÂ∞ùËØïËé∑ÂèñÊèí‰ª∂ÁöÑËØ≠Ë®ÄËÆæÁΩÆ
    const config = vscode.workspace.getConfiguration('gitCommit');
    const configLanguage = config.get('language');
    
    if (configLanguage && configLanguage !== 'system') {
        return configLanguage;
    }

    // Â¶ÇÊûúÊ≤°ÊúâËÆæÁΩÆÊàñËÆæÁΩÆ‰∏∫ systemÔºåÂàô‰ΩøÁî® VS Code ÁöÑÊòæÁ§∫ËØ≠Ë®ÄËÆæÁΩÆ
    const vscodeConfig = vscode.workspace.getConfiguration('locale');
    const displayLanguage = vscodeConfig.get('locale') || vscode.env.language;
    const vscodeLang = displayLanguage.toLowerCase();
    
    // Â∞Ü VS Code ÁöÑËØ≠Ë®Ä‰ª£Á†ÅÊò†Â∞ÑÂà∞Êàë‰ª¨ÊîØÊåÅÁöÑËØ≠Ë®Ä
    if (vscodeLang.includes('zh') || vscodeLang.includes('chinese') || vscodeLang.includes('ÁÆÄ‰Ωì')) {
        return 'zh-cn';
    }
    
    // ÈªòËÆ§‰ΩøÁî®Ëã±Êñá
    return 'en';
}

// Ëé∑ÂèñÂΩìÂâçËØ≠Ë®ÄÁöÑÊñáÊú¨
function getText(key) {
    const lang = getCurrentLanguage();
    const messages = i18n[lang].messages;
    return messages[key] || i18n['en'].messages[key] || key;
}

// Ëé∑ÂèñÂΩìÂâçËØ≠Ë®ÄÁöÑÊèê‰∫§Á±ªÂûã
function getCommitTypes() {
    const lang = getCurrentLanguage();
    return i18n[lang].commitTypes;
}

// ‰ΩøÁî® Promise Â∞ÅË£Ö spawn
function spawnAsync(command, args, options) {
    return new Promise((resolve, reject) => {
        const process = spawn(command, args, options);
        let stdout = '';
        let stderr = '';

        process.stdout.on('data', (data) => {
            stdout += data.toString();
        });

        process.stderr.on('data', (data) => {
            stderr += data.toString();
        });

        process.on('close', (code) => {
            if (code === 0) {
                resolve({ stdout, stderr });
            } else {
                reject(new Error(`Command failed with code ${code}\n${stderr}`));
            }
        });

        process.on('error', reject);
    });
}

async function getChangedFiles(workspaceRoot) {
    const { stdout } = await spawnAsync('git', ['status', '--porcelain'], { cwd: workspaceRoot });
    return stdout.split('\n')
        .filter(line => line.trim())
        .map(line => ({
            status: line.substring(0, 2).trim(),
            path: line.substring(3)
        }));
}

async function selectFiles(changedFiles) {
    const items = changedFiles.map(file => ({
        label: file.path,
        description: file.status,
        picked: true // ÈªòËÆ§ÂÖ®ÈÄâ
    }));

    const selectedItems = await vscode.window.showQuickPick(items, {
        canPickMany: true,
        placeHolder: getText('selectFiles')
    });

    return selectedItems ? selectedItems.map(item => item.label) : null;
}

async function selectCommitType() {
    const selected = await vscode.window.showQuickPick(getCommitTypes(), {
        placeHolder: getText('selectCommitType')
    });

    return selected ? selected : null;
}

async function getCommitMessage(type) {
    const message = await vscode.window.showInputBox({
        placeHolder: getText('enterCommitMessage'),
        prompt: getText('enterCommitMessage')
    });

    return message ? `${type.value}: ${type.icon} ${message}` : null;
}

async function gitAdd(files, workspaceRoot) {
    try {
        for (const file of files) {
            await spawnAsync('git', ['add', file], { cwd: workspaceRoot });
        }
    } catch (error) {
        throw new Error(`Ê∑ªÂä†Êñá‰ª∂Â§±Ë¥•: ${error.message}`);
    }
}

async function gitCommit(message, workspaceRoot) {
    try {
        await spawnAsync('git', ['commit', '-m', message], { cwd: workspaceRoot });
    } catch (error) {
        throw new Error(`Êèê‰∫§Â§±Ë¥•: ${error.message}`);
    }
}

async function getProxyConfig() {
    const config = vscode.workspace.getConfiguration('gitCommit');
    return {
        enabled: config.get('proxy.enabled', false),
        host: config.get('proxy.host', '127.0.0.1'),
        port: config.get('proxy.port', '7890')
    };
}

async function gitPush(workspaceRoot) {
    try {
        // Ëé∑ÂèñÂΩìÂâçÂàÜÊîØÂêç
        const { stdout: branchName } = await spawnAsync('git', ['rev-parse', '--abbrev-ref', 'HEAD'], { 
            cwd: workspaceRoot,
            env: { ...process.env }
        });
        const currentBranch = branchName.trim();

        // Ëé∑Âèñ‰ª£ÁêÜÈÖçÁΩÆ
        const proxyConfig = await getProxyConfig();
        
        // ËÆæÁΩÆÁéØÂ¢ÉÂèòÈáè
        const gitEnv = {
            ...process.env,
            GIT_TERMINAL_PROMPT: '1',
            GIT_TRACE: '2',
            GIT_CURL_VERBOSE: '1',
            GIT_TRACE_PACKET: '1'
        };

        // Â¶ÇÊûúÂêØÁî®‰∫Ü‰ª£ÁêÜÔºåÊ∑ªÂä†‰ª£ÁêÜËÆæÁΩÆ
        if (proxyConfig.enabled) {
            const proxyUrl = `http://${proxyConfig.host}:${proxyConfig.port}`;
            gitEnv.HTTPS_PROXY = proxyUrl;
            gitEnv.HTTP_PROXY = proxyUrl;
            console.log('‰ΩøÁî®‰ª£ÁêÜ:', proxyUrl);
        }

        // ÂÖàÊµãËØïËøûÊé•
        try {
            await spawnAsync('git', ['ls-remote', '--exit-code', 'origin'], {
                cwd: workspaceRoot,
                env: gitEnv
            });
        } catch (error) {
            console.error('Remote connection test failed:', error);
            throw new Error(`Êó†Ê≥ïËøûÊé•Âà∞ËøúÁ®ã‰ªìÂ∫ì: ${error.message}`);
        }

        // ÊâßË°åpushÊìç‰Ωú
        const { stdout, stderr } = await spawnAsync('git', ['push', '-v', '-u', 'origin', currentBranch], {
            cwd: workspaceRoot,
            env: gitEnv,
            timeout: 30000 // 30ÁßíË∂ÖÊó∂
        });

        console.log('Push stdout:', stdout);
        if (stderr) console.log('Push stderr:', stderr);

        return stdout;
    } catch (error) {
        console.error('Push error:', error);
        if (error.message.includes("Couldn't connect to server")) {
            throw new Error(getText('networkError'));
        } else if (error.message.includes('Authentication failed')) {
            throw new Error(getText('authError'));
        } else {
            throw error;
        }
    }
}

// Ê£ÄÊü•ÊòØÂê¶ÊúâÊú™Êé®ÈÄÅÁöÑÊèê‰∫§
async function hasUnpushedCommits(workspaceRoot) {
    try {
        const { stdout } = await spawnAsync('git', ['status', '-sb'], { cwd: workspaceRoot });
        // Ê£ÄÊü•ËæìÂá∫‰∏≠ÊòØÂê¶ÂåÖÂê´ "ahead" Â≠óÊ†∑ÔºåË°®Á§∫ÊúâÊú™Êé®ÈÄÅÁöÑÊèê‰∫§
        return stdout.includes('ahead');
    } catch (error) {
        console.error('Ê£ÄÊü•Êú™Êé®ÈÄÅÊèê‰∫§Â§±Ë¥•:', error);
        return false;
    }
}

// ËÆæÁΩÆ‰ª£ÁêÜÈÖçÁΩÆ
async function setProxyConfig() {
    try {
        // Ëé∑ÂèñÂΩìÂâçÈÖçÁΩÆ
        const currentConfig = await getProxyConfig();
        
        // ËØ¢ÈóÆÊòØÂê¶ÂêØÁî®‰ª£ÁêÜ
        const enableProxy = await vscode.window.showQuickPick([getText('yes'), getText('no')], {
            placeHolder: getText('enableProxy'),
            title: getText('proxyTitle')
        });
        
        if (!enableProxy) {
            return; // Áî®Êà∑ÂèñÊ∂à
        }

        const enabled = enableProxy === getText('yes');
        let host = currentConfig.host;
        let port = currentConfig.port;

        if (enabled) {
            // Ëé∑Âèñ‰ª£ÁêÜ‰∏ªÊú∫Âú∞ÂùÄ
            host = await vscode.window.showInputBox({
                value: currentConfig.host,
                placeHolder: getText('proxyHost'),
                prompt: getText('proxyHost'),
                title: getText('proxyTitle')
            });

            if (!host) {
                return; // Áî®Êà∑ÂèñÊ∂à
            }

            // Ëé∑Âèñ‰ª£ÁêÜÁ´ØÂè£
            port = await vscode.window.showInputBox({
                value: currentConfig.port,
                placeHolder: getText('proxyPort'),
                prompt: getText('proxyPort'),
                title: getText('proxyTitle')
            });

            if (!port) {
                return; // Áî®Êà∑ÂèñÊ∂à
            }
        }

        // ‰øùÂ≠òÈÖçÁΩÆ
        const config = vscode.workspace.getConfiguration('gitCommit');
        await config.update('proxy.enabled', enabled, true);
        if (enabled) {
            await config.update('proxy.host', host, true);
            await config.update('proxy.port', port, true);
        }

        vscode.window.showInformationMessage(enabled ? getText('proxyEnabled') : getText('proxyDisabled'));
    } catch (error) {
        console.error('ËÆæÁΩÆ‰ª£ÁêÜÂ§±Ë¥•:', error);
        vscode.window.showErrorMessage(getText('proxyError') + ': ' + error.message);
    }
}

class SettingsWebviewProvider {
    constructor(context) {
        this.context = context;
        this._view = undefined;
    }

    resolveWebviewView(webviewView) {
        this._view = webviewView;
        webviewView.webview.options = {
            enableScripts: true
        };
        this.updateContent();
    }

    async updateContent() {
        if (!this._view) {
            return;
        }

        const config = vscode.workspace.getConfiguration('gitCommit');
        const currentLanguage = config.get('language', 'zh-cn');
        const proxyEnabled = config.get('proxy.enabled', false);
        const proxyHost = config.get('proxy.host', '127.0.0.1');
        const proxyPort = config.get('proxy.port', '7890');

        // Ëé∑ÂèñÂΩìÂâçËØ≠Ë®ÄÁöÑËÆæÁΩÆÊñáÊú¨
        const settingsText = i18n[currentLanguage].messages.settings;

        this._view.webview.html = `<!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <style>
                body {
                    padding: 16px;
                    color: var(--vscode-foreground);
                    font-family: var(--vscode-font-family);
                    background-color: var(--vscode-sideBar-background);
                }
                
                .setting-item {
                    background-color: var(--vscode-editor-background);
                    border-radius: 6px;
                    padding: 16px;
                    margin-bottom: 16px;
                    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
                }

                .setting-item:hover {
                    background-color: var(--vscode-list-hoverBackground);
                }

                .setting-header {
                    display: flex;
                    align-items: center;
                    margin-bottom: 12px;
                }

                .setting-icon {
                    width: 20px;
                    height: 20px;
                    margin-right: 8px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    color: var(--vscode-textLink-foreground);
                }

                .setting-title {
                    font-size: 14px;
                    font-weight: 600;
                    color: var(--vscode-settings-headerForeground);
                    margin: 0;
                }

                .setting-description {
                    font-size: 12px;
                    color: var(--vscode-descriptionForeground);
                    margin-bottom: 12px;
                }

                select, input[type="text"] {
                    width: 100%;
                    padding: 8px;
                    border: 1px solid var(--vscode-input-border);
                    background-color: var(--vscode-input-background);
                    color: var(--vscode-input-foreground);
                    border-radius: 4px;
                    outline: none;
                    font-size: 13px;
                }

                select:focus, input[type="text"]:focus {
                    border-color: var(--vscode-focusBorder);
                }

                .checkbox-container {
                    display: flex;
                    align-items: center;
                    margin-bottom: 8px;
                }

                .checkbox-container input[type="checkbox"] {
                    margin-right: 8px;
                }

                .proxy-settings {
                    margin-top: 12px;
                    padding-top: 12px;
                    border-top: 1px solid var(--vscode-panel-border);
                    display: ${proxyEnabled ? 'block' : 'none'};
                }

                .input-group {
                    margin-bottom: 12px;
                }

                .input-group label {
                    display: block;
                    margin-bottom: 6px;
                    font-size: 12px;
                    color: var(--vscode-foreground);
                }

                .input-hint {
                    font-size: 11px;
                    color: var(--vscode-descriptionForeground);
                    margin-top: 4px;
                }

                /* Âä®ÁîªÊïàÊûú */
                .setting-item {
                    transition: all 0.2s ease;
                }

                .proxy-settings {
                    transition: all 0.3s ease;
                }

                select, input[type="text"] {
                    transition: border-color 0.2s ease;
                }
            </style>
        </head>
        <body>
            <div class="setting-item">
                <div class="setting-header">
                    <div class="setting-icon">üåç</div>
                    <h3 class="setting-title">${settingsText.language.title}</h3>
                </div>
                <div class="setting-description">${settingsText.language.description}</div>
                <select id="language">
                    <option value="system" ${currentLanguage === 'system' ? 'selected' : ''}>
                        ${currentLanguage === 'zh-cn' ? 'Ë∑üÈöèÁ≥ªÁªü' : 'Follow System'}
                    </option>
                    <option value="zh-cn" ${currentLanguage === 'zh-cn' ? 'selected' : ''}>‰∏≠Êñá</option>
                    <option value="en" ${currentLanguage === 'en' ? 'selected' : ''}>English</option>
                </select>
            </div>

            <div class="setting-item">
                <div class="setting-header">
                    <div class="setting-icon">üîå</div>
                    <h3 class="setting-title">${settingsText.proxy.title}</h3>
                </div>
                <div class="setting-description">${settingsText.proxy.description}</div>
                <div class="checkbox-container">
                    <input type="checkbox" id="proxyEnabled" ${proxyEnabled ? 'checked' : ''}>
                    <label for="proxyEnabled">${settingsText.proxy.enabled.description}</label>
                </div>
                
                <div class="proxy-settings" id="proxySettings">
                    <div class="input-group">
                        <label for="proxyHost">${settingsText.proxy.host.title}</label>
                        <input type="text" id="proxyHost" value="${proxyHost}">
                        <div class="input-hint">${settingsText.proxy.host.placeholder}</div>
                    </div>
                    <div class="input-group">
                        <label for="proxyPort">${settingsText.proxy.port.title}</label>
                        <input type="text" id="proxyPort" value="${proxyPort}">
                        <div class="input-hint">${settingsText.proxy.port.placeholder}</div>
                    </div>
                </div>
            </div>

            <script>
                const vscode = acquireVsCodeApi();
                
                document.getElementById('language').addEventListener('change', (e) => {
                    vscode.postMessage({
                        command: 'updateLanguage',
                        value: e.target.value
                    });
                });

                document.getElementById('proxyEnabled').addEventListener('change', (e) => {
                    const proxySettings = document.getElementById('proxySettings');
                    proxySettings.style.display = e.target.checked ? 'block' : 'none';
                    vscode.postMessage({
                        command: 'updateProxy',
                        enabled: e.target.checked,
                        host: document.getElementById('proxyHost').value,
                        port: document.getElementById('proxyPort').value
                    });
                });

                const debounce = (func, wait) => {
                    let timeout;
                    return function executedFunction(...args) {
                        const later = () => {
                            clearTimeout(timeout);
                            func(...args);
                        };
                        clearTimeout(timeout);
                        timeout = setTimeout(later, wait);
                    };
                };

                const updateProxySettings = debounce(() => {
                    vscode.postMessage({
                        command: 'updateProxy',
                        enabled: document.getElementById('proxyEnabled').checked,
                        host: document.getElementById('proxyHost').value,
                        port: document.getElementById('proxyPort').value
                    });
                }, 500);

                document.getElementById('proxyHost').addEventListener('input', updateProxySettings);
                document.getElementById('proxyPort').addEventListener('input', updateProxySettings);
            </script>
        </body>
        </html>`; 

        this._view.webview.onDidReceiveMessage(async message => {
            const config = vscode.workspace.getConfiguration('gitCommit');
            
            switch (message.command) {
                case 'updateLanguage':
                    await config.update('language', message.value, true);
                    vscode.window.showInformationMessage(getText('config.language.description'));
                    this.updateContent(); // Âà∑Êñ∞ËßÜÂõæ‰ª•Êõ¥Êñ∞ËØ≠Ë®Ä
                    break;
                    
                case 'updateProxy':
                    await config.update('proxy.enabled', message.enabled, true);
                    if (message.enabled) {
                        await config.update('proxy.host', message.host, true);
                        await config.update('proxy.port', message.port, true);
                    }
                    vscode.window.showInformationMessage(
                        message.enabled ? getText('proxyEnabled') : getText('proxyDisabled')
                    );
                    break;
            }
        });
    }
}

async function activate(context) {
    console.log('Êâ©Â±ïÂ∑≤ÊøÄÊ¥ª');

    // ÁõëÂê¨ VS Code ËØ≠Ë®ÄÂèòÂåñ
    let currentDisplayLanguage = vscode.workspace.getConfiguration('locale').get('locale');

    context.subscriptions.push(
        vscode.workspace.onDidChangeConfiguration(e => {
            if (e.affectsConfiguration('locale.locale') || e.affectsConfiguration('gitCommit.language')) {
                const newDisplayLanguage = vscode.workspace.getConfiguration('locale').get('locale');
                if (newDisplayLanguage !== currentDisplayLanguage) {
                    currentDisplayLanguage = newDisplayLanguage;
                    // Êõ¥Êñ∞ËÆæÁΩÆËßÜÂõæ
                    if (settingsProvider && settingsProvider._view) {
                        settingsProvider.updateContent();
                    }
                }
            }
        })
    );

    // Ê≥®ÂÜåËÆæÁΩÆËßÜÂõæÊèê‰æõËÄÖ
    const settingsProvider = new SettingsWebviewProvider(context);
    context.subscriptions.push(
        vscode.window.registerWebviewViewProvider('git-commit-settings', settingsProvider)
    );

    // Ê≥®ÂÜåÊèê‰∫§ÂëΩ‰ª§
    let commitDisposable = vscode.commands.registerCommand('git-commit-helper.commit', async () => {
        try {
            console.log('ÂëΩ‰ª§ÂºÄÂßãÊâßË°å');
            const workspaceRoot = vscode.workspace.workspaceFolders?.[0].uri.fsPath;
            
            if (!workspaceRoot) {
                throw new Error(getText('noWorkspace'));
            }

            // Ëé∑ÂèñÊõ¥ÊîπÁöÑÊñá‰ª∂
            const changedFiles = await getChangedFiles(workspaceRoot);
            console.log('Êõ¥ÊîπÁöÑÊñá‰ª∂:', changedFiles);

            if (changedFiles.length === 0) {
                // Ê£ÄÊü•ÊòØÂê¶ÊúâÊú™Êé®ÈÄÅÁöÑÊèê‰∫§
                const hasUnpushed = await hasUnpushedCommits(workspaceRoot);
                if (hasUnpushed) {
                    const shouldPush = await vscode.window.showInformationMessage(
                        getText('hasUnpushedCommits'),
                        { modal: true },
                        getText('yes'),
                        getText('no')
                    );

                    if (shouldPush === getText('yes')) {
                        try {
                            await vscode.window.withProgress({
                                location: vscode.ProgressLocation.Notification,
                                title: getText('pushing'),
                                cancellable: false
                            }, async () => {
                                console.log('ÂºÄÂßãÊé®ÈÄÅ...');
                                const pushOutput = await gitPush(workspaceRoot);
                                console.log('Êé®ÈÄÅËæìÂá∫:', pushOutput);
                                vscode.window.showInformationMessage(getText('pushSuccess'));
                            });
                        } catch (error) {
                            console.error('Êé®ÈÄÅÂ§±Ë¥•:', error);
                            const errorMessage = error.message || getText('pushFailed');
                            vscode.window.showErrorMessage(getText('pushFailed') + ': ' + errorMessage);
                        }
                    }
                    return;
                }
                vscode.window.showInformationMessage(getText('noChanges'));
                return;
            }

            // ÈÄâÊã©Êñá‰ª∂
            console.log('Á≠âÂæÖÁî®Êà∑ÈÄâÊã©Êñá‰ª∂...');
            const selectedFiles = await selectFiles(changedFiles);
            if (!selectedFiles || selectedFiles.length === 0) {
                vscode.window.showWarningMessage(getText('noChanges'));
                return;
            }

            // ÈÄâÊã©Êèê‰∫§Á±ªÂûã
            console.log('Á≠âÂæÖÁî®Êà∑ÈÄâÊã©Êèê‰∫§Á±ªÂûã...');
            const commitType = await selectCommitType();
            if (!commitType) {
                vscode.window.showWarningMessage(getText('selectCommitType'));
                return;
            }

            // Ëé∑ÂèñÊèê‰∫§‰ø°ÊÅØ
            console.log('Á≠âÂæÖÁî®Êà∑ËæìÂÖ•Êèê‰∫§‰ø°ÊÅØ...');
            const commitMessage = await getCommitMessage(commitType);
            if (!commitMessage) {
                vscode.window.showWarningMessage(getText('enterCommitMessage'));
                return;
            }

            // ÊâßË°ågitÊìç‰Ωú
            try {
                console.log('ÂºÄÂßãgitÊìç‰Ωú...');
                await gitAdd(selectedFiles, workspaceRoot);
                console.log('git addÂÆåÊàê');
                await gitCommit(commitMessage, workspaceRoot);
                console.log('git commitÂÆåÊàê');

                // ‰ΩøÁî®ÁÆÄÂçïÁöÑÁ°ÆËÆ§ÂØπËØùÊ°Ü
                const result = await vscode.window.showInformationMessage(
                    getText('commitSuccess') + getText('pushQuestion'),
                    { modal: true },
                    getText('yes'),
                    getText('no')
                );

                if (result === getText('yes')) {
                    console.log('Áî®Êà∑ÈÄâÊã©Êé®ÈÄÅÂà∞ËøúÁ®ã');
                    try {
                        // ÊòæÁ§∫ËøõÂ∫¶ÊèêÁ§∫
                        await vscode.window.withProgress({
                            location: vscode.ProgressLocation.Notification,
                            title: getText('pushing'),
                            cancellable: false
                        }, async () => {
                            console.log('ÂºÄÂßãÊé®ÈÄÅ...');
                            const pushOutput = await gitPush(workspaceRoot);
                            console.log('Êé®ÈÄÅËæìÂá∫:', pushOutput.stdout);
                            vscode.window.showInformationMessage(getText('pushSuccess'));
                        });
                    } catch (error) {
                        console.error('Êé®ÈÄÅÂ§±Ë¥•:', error);
                        // ÊòæÁ§∫Êõ¥ËØ¶ÁªÜÁöÑÈîôËØØ‰ø°ÊÅØ
                        const errorMessage = error.message || getText('pushFailed');
                        vscode.window.showErrorMessage(getText('pushFailed') + ': ' + errorMessage);
                    }
                } else {
                    console.log('Áî®Êà∑ÈÄâÊã©‰∏çÊé®ÈÄÅ');
                    vscode.window.showInformationMessage(getText('commitSuccess'));
                }
            } catch (error) {
                console.error('GitÊìç‰ΩúÈîôËØØ:', error);
                vscode.window.showErrorMessage(getText('commitFailed') + ': ' + error.message);
            }
        } catch (error) {
            console.error('ÂëΩ‰ª§ÊâßË°åÈîôËØØ:', error);
            vscode.window.showErrorMessage(getText('commitFailed') + ': ' + error.message);
        }
    });

    // Ê≥®ÂÜåËÆæÁΩÆ‰ª£ÁêÜÂëΩ‰ª§
    let proxyDisposable = vscode.commands.registerCommand('git-commit-helper.setProxy', setProxyConfig);

    context.subscriptions.push(commitDisposable, proxyDisposable);
}

function deactivate() {}

module.exports = {
    activate,
    deactivate
};
